@page "/"
@implements IDisposable
@using Radzen.Blazor

<div class="clock-container">
    <div class="date-display">@currentDate</div>
    <div class="clock">
        <div class="time-segment h">@hours</div>
        <div class="colon">:</div>
        <div class="time-segment m">@minutes</div>
        <div class="colon">:</div>
        <div class="time-segment s">@seconds</div>
    </div>
</div>

<div class="button-container">
    <RadzenButton Text="Start" Disabled="@isStartDisabled" Click="@Start" Style="margin-right: 10px;"></RadzenButton>
    <RadzenButton Text="Pause" Disabled="@isPauseDisabled" Click="@Pause" Style="margin-right: 10px;"></RadzenButton>
    <RadzenButton Text="Stop" Disabled="@isStopDisabled" Click="@Stop"></RadzenButton>
</div>
<hr class="button-divider" />

<RadzenTabs>
    <Tabs>
    <RadzenTabsItem Text="Timeclock">
        @foreach (var time in startTimes)
        {
            <div>@time</div>
        }
    </RadzenTabsItem>
    <RadzenTabsItem Text="Settings">
        @foreach (var time in pauseTimes)
        {
            <div>@time</div>
        }
    </RadzenTabsItem>
    <RadzenTabsItem Text="Account">
        @foreach (var time in stopTimes)
        {
            <div>@time</div>
        }
    </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    private System.Timers.Timer timer;
    private string hours = DateTime.Now.ToString("hh");
    private string minutes = DateTime.Now.ToString("mm");
    private string seconds = DateTime.Now.ToString("ss");
    private string currentDate = DateTime.Now.ToString("dddd, MMMM dd, yyyy");

    private bool isStartDisabled = false;
    private bool isPauseDisabled = true;
    private bool isStopDisabled = true;

    private List<string> startTimes = new List<string>();
    private List<string> pauseTimes = new List<string>();
    private List<string> stopTimes = new List<string>();

    protected override void OnInitialized()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += TimerElapsed;
        timer.Enabled = true;
    }

    private void TimerElapsed(Object source, System.Timers.ElapsedEventArgs e)
    {
        hours = DateTime.Now.ToString("hh");
        minutes = DateTime.Now.ToString("mm");
        seconds = DateTime.Now.ToString("ss");
        currentDate = DateTime.Now.ToString("dddd, MMMM dd, yyyy");
        InvokeAsync(StateHasChanged); // Request the UI to refresh
    }

    private void Start()
    {
        isStartDisabled = true;
        isPauseDisabled = false;
        isStopDisabled = false;
        startTimes.Add(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
    }

    private void Pause()
    {
        
        isStopDisabled = !isStopDisabled; // Toggle stop disabled state based on pause state
        pauseTimes.Add(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
    }

    private void Stop()
    {
        isStartDisabled = false;
        isPauseDisabled = true;
        isStopDisabled = true;
        stopTimes.Add(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
